package io.grpc.examples.routeguide;

import java.util.List;
import java.util.function.Consumer;
import org.jackstaff.grpc.MethodType;
import org.jackstaff.grpc.annotation.Protocol;
import org.jackstaff.grpc.annotation.RpcMethod;

/**
 * Generated by org.jackstaff.grpc.generator.ProtocolProcessor;  DO NOT EDIT!
 */
@Protocol
public interface RouteGuide {
    String SERVICE_NAME = RegistryMapping.addProtocol(RouteGuide.class, RouteGuideGrpc.getServiceDescriptor());

    @RpcMethod(
            methodType = MethodType.UNARY
    )
    Feature getFeature(Point point);

    @RpcMethod(
            methodType = MethodType.ASYNCHRONOUS_UNARY
    )
    default void getFeature(Point point, Consumer<Feature> featureResult) {
        throw new RuntimeException("Do NOT implement it.");
    }

    @RpcMethod(
            methodType = MethodType.SERVER_STREAMING
    )
    void listFeatures(Rectangle rectangle, Consumer<Feature> featureStream);

    @RpcMethod(
            methodType = MethodType.BLOCKING_SERVER_STREAMING
    )
    default List<Feature> listFeatures(Rectangle rectangle) {
        throw new RuntimeException("Do NOT implement it.");
    }

    @RpcMethod(
            methodType = MethodType.CLIENT_STREAMING
    )
    Consumer<Point> recordRoute(Consumer<RouteSummary> routeSummaryResult);

    @RpcMethod(
            methodType = MethodType.BIDI_STREAMING
    )
    Consumer<RouteNote> routeChat(Consumer<RouteNote> routeNoteStream);
}
